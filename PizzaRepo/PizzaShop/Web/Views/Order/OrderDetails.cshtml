@model Entity.ViewModel.OrderDetailsViewModel
@{
    Layout = "~/Views/Shared/_SecondLayout.cshtml";
    ViewData["Title"] = "OrderDetails";
}

<div class="row-11 d-flex align-items-center justify-content-center">
    <div class="row w-75">
        <div class="text-Users-title my-3 mx-2 fs-2 col-6">
            Order-Details
        </div>
        <div class="col my-3 text-align-right">
            <a asp-controller="Order" asp-action="Index">
                <button class="px-3 py-2 back-button">
                    Back
                </button>
            </a>
        </div>
        <div class=" col-12 my-3 bg-white table-shadow p-2">
            <div class="row-12 d-flex w-100 align-items-center">
                <p class=" col-3 fs-4 ">Order Summary</p>
                <p class="order-status fs-5 col-2">@Model.Status</p>
                <div class="col-7 d-flex justify-content-end p-2">
                    <button id="exportPdfBtn" class="row px-3 p-2 send-button export-button">
                        <div class="d-flex">
                            <i class="fa-solid fa-file-export my-2"></i>
                            <p class="my-1">Export</p>
                        </div>
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-2">
                    Invoice No :
                </div>
                <div class="col-1">
                    @Model.InvoiceNumber
                </div>
            </div>
            <div class="row w-100">
                <div class="col-2 w-auto">
                    Paid On:
                </div>
                <div class="col-1 w-auto">
                    @Model.PaidOn.ToString("yyyy-MM-dd HH:mm")
                </div>
                <div class="col-2 w-auto">
                    Placed On:
                </div>
                <div class="col-1 w-auto">
                    @Model.PlacedOn.ToString("yyyy-MM-dd HH:mm")
                </div>
                <div class="col-2 w-auto">
                    Modified On:
                </div>
                <div class="col-1 w-auto">
                    @(Model.ModifiedOn?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")
                </div>
                <div class="col-2 w-auto">
                    Order Duration:
                </div>
                <div class="col-1 w-auto">
                    @Model.OrderDuration.ToString(@"hh\:mm")
                </div>
            </div>
        </div>
        <div class="col-6 bg-white table-shadow">
            <div class="row d-flex">
                <i class="fa-regular fa-user col"></i>
                <p>
                    Customer-Details
                </p>
            </div>
            <div class="row">
                <p class="col">Name: @Model.CustomerName</p>
            </div>
            <div class="row">
                <p class="col">Phone: @Model.Phone</p>
            </div>
            <div class="row">
                <p class="col">No. Of Person: @Model.NumberOfPersons</p>
            </div>
            <div class="row">
                <p class="col">Email : @Model.Email</p>
            </div>
        </div>
        <div class="col-6 bg-white table-shadow">
            <div>
                <i class="fa-solid fa-chair"></i>
                <p>
                    Table Details
                </p>
            </div>
            <div class="row">
                <p class="col">Table: @Model.TableName</p>
            </div>
            <div class="row">
                <p class="col">Section: @Model.SectionName</p>
            </div>
        </div>
        <div class="col-12 my-2 bg-white table-shadow">
            <p>Order Items</p>
            <div class="table-responsive row m-2">
                <table class="table ">
                    <thead>
                        <tr>
                            <th scope="col" class="text-black-50">Sr.no</th>
                            <th scope="col" class="text-black-50">Item</th>
                            <th scope="col" class="text-black-50">Quantity</th>
                            <th scope="col" class="text-black-50">Price</th>
                            <th scope="col" class="text-black-50">Total Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrderItems)
                        {
                            <tr>
                                <td>
                                    @item.SrNo
                                </td>
                                <td>
                                    @item.ItemName
                                    @if (item.Modifiers.Any())
                                    {
                                        <div>
                                            @foreach (var modifier in item.Modifiers)
                                            {
                                                <li>
                                                    @modifier.ModifierName
                                                </li>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    @item.Quantity
                                    @if (item.Modifiers.Any())
                                    {
                                        <div>
                                            @foreach (var modifier in item.Modifiers)
                                            {
                                                <div>
                                                    @modifier.Quantity
                                                </div>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    @item.Price.ToString("0.00")
                                    @if (item.Modifiers.Any())
                                    {
                                        <div>
                                            @foreach (var modifier in item.Modifiers)
                                            {
                                                <div>
                                                    @modifier.Price.ToString("0.00")
                                                </div>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    @((item.Price * item.Quantity).ToString("0.00"))
                                    @if (item.Modifiers.Any())
                                    {
                                        <div>
                                            @foreach (var modifier in item.Modifiers)
                                            {
                                                <div>
                                                    @((modifier.Price * modifier.Quantity).ToString("0.00"))
                                                </div>
                                            }
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="justify-content-end w-100 col">
                <p class="text-align-right"> SubTotal:
                    @{
                        double subTotal = 0, total = 0;
                        @foreach (var item in Model.OrderItems)
                        {
                            subTotal += item.Price * item.Quantity;
                            @if (item.Modifiers.Any())
                            {
                                @foreach (var modifier in item.Modifiers)
                                {
                                    subTotal += modifier.Price * modifier.Quantity;
                                }
                            }
                        }
                        total += subTotal;
                    }
                    @("â‚¹ " + subTotal.ToString("0.00"))</p>
                @foreach (var tax in Model.Taxes)
                {
                    <p class="text-align-right"> @tax.TaxName: @((subTotal * tax.TaxValue * 0.01).ToString("0.00"))</p>
                    total += (subTotal * tax.TaxValue * 0.01);
                }
                <p class="text-align-right"> Total: @total.ToString("0.00")</p>
            </div>
        </div>
    </div>
</div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const exportBtn = document.getElementById('exportPdfBtn');

            exportBtn.addEventListener('click', function () {
                // Get the order ID from the URL or you can pass it from the model
                const orderId = @Model.OrderId; 

                exportBtn.disabled = true;
                exportBtn.querySelector('p').textContent = 'Generating...';

                // Call the controller method
                fetch(`/Order/GetPdf?id=${orderId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.blob();
                    })
                    .then(blob => {
                        // Create download link
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `invoice.pdf`;
                        document.body.appendChild(a);
                        a.click();

                        // Clean up
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to generate PDF. Please try again.');
                    })
                    .finally(() => {
                        // Reset button state
                        exportBtn.disabled = false;
                        exportBtn.querySelector('p').textContent = 'Export';
                    });
            });
        });
    </script>
