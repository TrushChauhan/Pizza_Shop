@model List<Entity.ViewModel.MenuCategoryViewModel>
@{
    Layout = "~/Views/Shared/_SecondLayout.cshtml";
    ViewData["Title"] = "Menu";
}
<div class="row my-4 px-3">
    <div class="col-6 text-Users-title fs-2">Menu</div>
</div>
<ul class="nav nav-tabs px-3" id="menuTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="items-tab" data-bs-toggle="tab" data-bs-target="#items" type="button" role="tab">
            <img src="~/images/menu-item-icon.png" class="me-2" width="20">Items
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="modifiers-tab" data-bs-toggle="tab" data-bs-target="#modifiers" type="button" role="tab">
            <img src="~/images/menu-item-icon.png" class="me-2" width="20">Modifiers
        </button>
    </li>
</ul>
<div class="tab-content mt-3 px-3">
    <!-- Items Tab -->
    <div class="tab-pane fade show active" id="items" role="tabpanel">
        <div class="row">
            <!-- Categories Column -->
            <div class="col-md-2">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>Categories</h5>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                        <i class="material-icons">add</i>
                    </button>
                </div>
                <div class="list-group" id="categoryList">
                    @foreach (var category in Model)
                    {
                        <a href="#" class="list-group-item list-group-item-action category-item" 
                           data-category-id="@category.CategoryId">
                            @category.CategoryName
                        </a>
                    }
                </div>
            </div>
            <!-- Items Column -->
            <div class="col-md-10">
                <div class="d-flex justify-content-between mb-3">
                    <div class="search-box w-75">
                        <input type="text" class="form-control" id="searchItem" placeholder="Search items">
                    </div>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">+ New Item</button>
                </div>
                <div class="table-responsive">
                    <table class="table" id="itemsTable">
                        <thead>
                            <tr>
                                <th scope="col" class="text-black-50">Name</th>
                                <th scope="col" class="text-black-50">Item Type</th>
                                <th scope="col" class="text-black-50">Rate</th>
                                <th scope="col" class="text-black-50">Quantity</th>
                                <th scope="col" class="text-black-50">Available</th>
                                <th scope="col" class="text-black-50">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Items will be dynamically loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- Modifiers Tab -->
    <div class="tab-pane fade" id="modifiers" role="tabpanel">
    <div class="row">
        <!-- Modifier Groups Column -->
        <div class="col-md-2">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Modifier Groups</h5>
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addModifierGroupModal">
                    <i class="material-icons">add</i>
                </button>
            </div>
            <div class="list-group" id="modifierGroupList">
                <!-- Modifier groups will be dynamically loaded here -->
            </div>
        </div>
        <!-- Modifiers Column -->
        <div class="col-md-10">
            <div class="d-flex justify-content-between mb-3">
                <div class="search-box w-75">
                    <input type="text" class="form-control" id="searchModifier" placeholder="Search modifiers">
                </div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addModifierModal">+ New Modifier</button>
            </div>
            <div class="table-responsive">
                <table class="table" id="modifiersTable">
                    <thead>
                        <tr>
                            <th scope="col" class="text-black-50">Name</th>
                            <th scope="col" class="text-black-50">Unit</th>
                            <th scope="col" class="text-black-50">Rate</th>
                            <th scope="col" class="text-black-50">Quantity</th>
                            <th scope="col" class="text-black-50">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Modifiers will be dynamically loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div> 
</div>
<!-- Add Category Modal -->
<div class="modal fade" id="addCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addCategoryForm">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="categoryName" required>
                    </div>
                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCategory">Save</button>
            </div>
        </div>
    </div>
</div>
<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addItemForm">
                    <div class="mb-3">
                        <label for="itemName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="itemName" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemType" class="form-label">Type</label>
                        <input type="text" class="form-control" id="itemType" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemRate" class="form-label">Rate</label>
                        <input type="number" class="form-control" id="itemRate" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="itemQuantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemAvailable" class="form-label">Available</label>
                        <input type="checkbox" class="form-check-input" id="itemAvailable">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveItem">Save</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="addModifierGroupModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Modifier Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addModifierGroupForm">
                    <div class="mb-3">
                        <label for="modifierGroupName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="modifierGroupName" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierGroupDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="modifierGroupDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="minSelect" class="form-label">Minimum Selection</label>
                        <input type="number" class="form-control" id="minSelect" required>
                    </div>
                    <div class="mb-3">
                        <label for="maxSelect" class="form-label">Maximum Selection</label>
                        <input type="number" class="form-control" id="maxSelect" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveModifierGroup">Save</button>
            </div>
        </div>
    </div>
</div> 
<div class="modal fade" id="addModifierModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Modifier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addModifierForm">
                    <div class="mb-3">
                        <label for="modifierName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="modifierName" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierUnit" class="form-label">Unit</label>
                        <input type="text" class="form-control" id="modifierUnit" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierRate" class="form-label">Rate</label>
                        <input type="number" class="form-control" id="modifierRate" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="modifierQuantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="modifierDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveModifier">Save</button>
            </div>
        </div>
    </div>
</div> 
    <script>
        // Load items when a category is clicked
        document.querySelectorAll('.category-item').forEach(category => {
            category.addEventListener('click', () => {
                const categoryId = category.dataset.categoryId;
                loadItems(categoryId);
            });
        });
        // Function to load items
        function loadItems(categoryId) {
            fetch(`/Menu/GetItems?categoryId=${categoryId}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#itemsTable tbody');
                    tbody.innerHTML = ''; // Clear existing rows
                    data.forEach(item => {
                        const row = `
                            <tr>
                                <td>${item.itemName}</td>
                                <td>${item.itemType}</td>
                                <td>${item.rate}</td>
                                <td>${item.quantity}</td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" ${item.available ? 'checked' : ''}>
                                    </div>
                                </td>
                                <td>
                                    <i class="material-icons" onclick="editItem(${item.itemId})">edit</i>
                                    <i class="material-icons" onclick="deleteItem(${item.itemId})">delete</i>
                                </td>
                            </tr>
                        `;
                        tbody.insertAdjacentHTML('beforeend', row);
                    });
                });
        }
        // Save Category
        document.getElementById('saveCategory').addEventListener('click', () => {
            const categoryName = document.getElementById('categoryName').value;
            const categoryDescription = document.getElementById('categoryDescription').value;
            fetch('/Menu/AddCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryName: categoryName,
                    description: categoryDescription
                })
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Failed to add category');
                }
            });
        });
        // Save Item
        document.getElementById('saveItem').addEventListener('click', () => {
            const itemData = {
                categoryId: document.querySelector('.category-item.active').dataset.categoryId,
                itemName: document.getElementById('itemName').value,
                itemType: document.getElementById('itemType').value,
                rate: document.getElementById('itemRate').value,
                quantity: document.getElementById('itemQuantity').value,
                available: document.getElementById('itemAvailable').checked
            };
            fetch('/Menu/AddItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(itemData)
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Failed to add item');
                }
            });
        });
        function deleteItem(itemId) {
            if (confirm('Are you sure you want to delete this item?')) {
                fetch(`/Menu/DeleteItem/${itemId}`, {
                    method: 'POST'
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete item');
                    }
                });
            }
        }
        // Load modifier groups
function loadModifierGroups() {
    fetch('/Menu/GetModifierGroups')
        .then(response => response.json())
        .then(data => {
            const modifierGroupList = document.getElementById('modifierGroupList');
            modifierGroupList.innerHTML = ''; // Clear existing groups
            data.forEach(group => {
                const groupItem = `
                    <a href="#" class="list-group-item list-group-item-action modifier-group-item" 
                       data-modifier-group-id="${group.modifierGroupId}">
                        ${group.modifierGroupName}
                    </a>
                `;
                modifierGroupList.insertAdjacentHTML('beforeend', groupItem);
            });
        });
}
// Load modifiers for a group
document.querySelectorAll('.modifier-group-item').forEach(group => {
    group.addEventListener('click', () => {
        const modifierGroupId = group.dataset.modifierGroupId;
        loadModifiers(modifierGroupId);
    });
});
// Function to load modifiers
function loadModifiers(modifierGroupId) {
    fetch(`/Menu/GetModifiers?modifierGroupId=${modifierGroupId}`)
        .then(response => response.json())
        .then(data => {
            const tbody = document.querySelector('#modifiersTable tbody');
            tbody.innerHTML = ''; // Clear existing rows
            data.forEach(modifier => {
                const row = `
                    <tr>
                        <td>${modifier.modifierName}</td>
                        <td>${modifier.unit}</td>
                        <td>${modifier.rate}</td>
                        <td>${modifier.quantity}</td>
                        <td>
                            <i class="material-icons" onclick="editModifier(${modifier.modifierId})">edit</i>
                            <i class="material-icons" onclick="deleteModifier(${modifier.modifierId})">delete</i>
                        </td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', row);
            });
        });
}
// Save Modifier Group
document.getElementById('saveModifierGroup').addEventListener('click', () => {
    const modifierGroupData = {
        modifierGroupName: document.getElementById('modifierGroupName').value,
        description: document.getElementById('modifierGroupDescription').value,
        minSelect: document.getElementById('minSelect').value,
        maxSelect: document.getElementById('maxSelect').value
    };
    fetch('/Menu/AddModifierGroup', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(modifierGroupData)
    })
    .then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            alert('Failed to add modifier group');
        }
    });
});
// Save Modifier
document.getElementById('saveModifier').addEventListener('click', () => {
    const modifierData = {
        modifierName: document.getElementById('modifierName').value,
        unit: document.getElementById('modifierUnit').value,
        rate: document.getElementById('modifierRate').value,
        quantity: document.getElementById('modifierQuantity').value,
        description: document.getElementById('modifierDescription').value
    };
    fetch('/Menu/AddModifier', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(modifierData)
    })
    .then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            alert('Failed to add modifier');
        }
    });
}); 
    </script>